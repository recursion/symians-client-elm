// @flow

/*::
type ModuleDeclaration = {
  name: string,
  values: Array<{ name : string, signature : string }>
}
*/

const path = require("path"),
  mkdirp = require("mkdirp"),
  fs = require("fs-extra");

function classNameForValue(moduleName /*: string*/, valueName /*: string*/) {
  return moduleName.replace(".", "-") + "-" + valueName;
}

function declarationForValue(moduleName /*: string*/, valueName /*: string */) {
  return (
    valueName +
    " : Html.Attribute msg\n" +
    valueName +
    ' =\n    Html.Attributes.class "' +
    classNameForValue(moduleName, valueName) +
    '"'
  );
}

function declarationsForModule(modul /*: ModuleDeclaration */) {
  return modul.values
    .filter(function(value) {
      return value.signature === "Css.File.UniqueClass";
    })
    .map(function(value) {
      return declarationForValue(modul.name, value.name);
    });
}

function moduleHeader(moduleName /*: string */) {
  return (
    "module " +
    moduleName +
    ".Css exposing (..)\n\n" +
    "{-| This file was generated by the elm-css binary. Don't edit it, because it will be overwritten!\n-}\n\n" +
    "import Html\nimport Html.Attributes\n\n\n"
  );
}

function generateModule(modul /*: ModuleDeclaration */) {
  // final newline is for posix compliance
  return (
    moduleHeader(modul.name) +
    declarationsForModule(modul).join("\n\n\n") +
    "\n"
  );
}

function writeFile(
  generatedCodeRoot /*: string*/,
  modul /*: ModuleDeclaration*/
) {
  const directory = path.join.apply(
    path,
    [generatedCodeRoot].concat(modul.name.split("."))
  );
  return new Promise(function(resolve, reject) {
    mkdirp(directory, function(dirError) {
      if (dirError) return reject(dirError);

      const filename = path.join(directory, "Css.elm");
      fs.writeFile(filename, generateModule(modul), function(fileError) {
        if (fileError) return reject(fileError);

        resolve(filename);
      });
    });
  });
}

module.exports = {
  classNameForValue: classNameForValue,
  writeFile: writeFile
};
