var _recursion$symulator_client_elm$UI_Input$ifNotIgnoringInput = F2(
	function (work, model) {
		return model.console.hasFocus ? A2(
			_recursion$symulator_client_elm$Utils_ops['=>'],
			A2(_recursion$symulator_client_elm$Utils_ops['=>'], model, _elm_lang$core$Platform_Cmd$none),
			_recursion$symulator_client_elm$App_Model$NoAction) : work;
	});
var _recursion$symulator_client_elm$UI_Input$NoOp = {ctor: 'NoOp'};
var _recursion$symulator_client_elm$UI_Input$SubmitConsoleInput = {ctor: 'SubmitConsoleInput'};
var _recursion$symulator_client_elm$UI_Input$MoveCameraZLevelDown = {ctor: 'MoveCameraZLevelDown'};
var _recursion$symulator_client_elm$UI_Input$MoveCameraZLevelUp = {ctor: 'MoveCameraZLevelUp'};
var _recursion$symulator_client_elm$UI_Input$MoveCameraRight = {ctor: 'MoveCameraRight'};
var _recursion$symulator_client_elm$UI_Input$MoveCameraLeft = {ctor: 'MoveCameraLeft'};
var _recursion$symulator_client_elm$UI_Input$MoveCameraDown = {ctor: 'MoveCameraDown'};
var _recursion$symulator_client_elm$UI_Input$MoveCameraUp = {ctor: 'MoveCameraUp'};
var _recursion$symulator_client_elm$UI_Input$matchKey = function (code) {
	var _p0 = code;
	switch (_p0) {
		case 82:
			return _recursion$symulator_client_elm$UI_Input$MoveCameraZLevelUp;
		case 70:
			return _recursion$symulator_client_elm$UI_Input$MoveCameraZLevelDown;
		case 87:
			return _recursion$symulator_client_elm$UI_Input$MoveCameraUp;
		case 83:
			return _recursion$symulator_client_elm$UI_Input$MoveCameraDown;
		case 65:
			return _recursion$symulator_client_elm$UI_Input$MoveCameraLeft;
		case 68:
			return _recursion$symulator_client_elm$UI_Input$MoveCameraRight;
		case 13:
			return _recursion$symulator_client_elm$UI_Input$SubmitConsoleInput;
		default:
			return _recursion$symulator_client_elm$UI_Input$NoOp;
	}
};
var _recursion$symulator_client_elm$UI_Input$keypress = F2(
	function (code, model) {
		var _p1 = _recursion$symulator_client_elm$UI_Input$matchKey(code);
		switch (_p1.ctor) {
			case 'NoOp':
				return A2(
					_recursion$symulator_client_elm$Utils_ops['=>'],
					A2(_recursion$symulator_client_elm$Utils_ops['=>'], model, _elm_lang$core$Platform_Cmd$none),
					_recursion$symulator_client_elm$App_Model$NoAction);
			case 'SubmitConsoleInput':
				if (model.console.hasFocus) {
					var _p2 = _recursion$symulator_client_elm$UI_Console_Input$process(model.console);
					var nextConsole = _p2._0._0;
					var cmd = _p2._0._1;
					var action = _p2._1;
					return A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{console: nextConsole}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _recursion$symulator_client_elm$UI_Model$ConsoleMsg, cmd)
						},
						action);
				} else {
					return A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						A2(_recursion$symulator_client_elm$Utils_ops['=>'], model, _elm_lang$core$Platform_Cmd$none),
						_recursion$symulator_client_elm$App_Model$NoAction);
				}
			case 'MoveCameraUp':
				return A2(
					_recursion$symulator_client_elm$UI_Input$ifNotIgnoringInput,
					A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									camera: _recursion$symulator_client_elm$UI_Camera_Move$up(model.camera)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						},
						_recursion$symulator_client_elm$App_Model$NoAction),
					model);
			case 'MoveCameraDown':
				return A2(
					_recursion$symulator_client_elm$UI_Input$ifNotIgnoringInput,
					A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						A2(
							_recursion$symulator_client_elm$Utils_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									camera: _recursion$symulator_client_elm$UI_Camera_Move$down(model.camera)
								}),
							_elm_lang$core$Platform_Cmd$none),
						_recursion$symulator_client_elm$App_Model$NoAction),
					model);
			case 'MoveCameraLeft':
				return A2(
					_recursion$symulator_client_elm$UI_Input$ifNotIgnoringInput,
					A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						A2(
							_recursion$symulator_client_elm$Utils_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									camera: _recursion$symulator_client_elm$UI_Camera_Move$left(model.camera)
								}),
							_elm_lang$core$Platform_Cmd$none),
						_recursion$symulator_client_elm$App_Model$NoAction),
					model);
			case 'MoveCameraRight':
				return A2(
					_recursion$symulator_client_elm$UI_Input$ifNotIgnoringInput,
					A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						A2(
							_recursion$symulator_client_elm$Utils_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									camera: _recursion$symulator_client_elm$UI_Camera_Move$right(model.camera)
								}),
							_elm_lang$core$Platform_Cmd$none),
						_recursion$symulator_client_elm$App_Model$NoAction),
					model);
			case 'MoveCameraZLevelUp':
				return A2(
					_recursion$symulator_client_elm$UI_Input$ifNotIgnoringInput,
					A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						A2(
							_recursion$symulator_client_elm$Utils_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									camera: _recursion$symulator_client_elm$UI_Camera_Move$zLevelUp(model.camera)
								}),
							_elm_lang$core$Platform_Cmd$none),
						_recursion$symulator_client_elm$App_Model$NoAction),
					model);
			default:
				return A2(
					_recursion$symulator_client_elm$UI_Input$ifNotIgnoringInput,
					A2(
						_recursion$symulator_client_elm$Utils_ops['=>'],
						A2(
							_recursion$symulator_client_elm$Utils_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									camera: _recursion$symulator_client_elm$UI_Camera_Move$zLevelDown(model.camera)
								}),
							_elm_lang$core$Platform_Cmd$none),
						_recursion$symulator_client_elm$App_Model$NoAction),
					model);
		}
	});
