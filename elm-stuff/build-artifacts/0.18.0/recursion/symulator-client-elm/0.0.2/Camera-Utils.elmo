var _recursion$symulator_client_elm$Camera_Utils$isInYBound = F3(
	function (maxY, loc, cam) {
		return (_elm_lang$core$Native_Utils.cmp(loc.y, cam.y) > -1) && (_elm_lang$core$Native_Utils.cmp(loc.y, cam.y + maxY) < 0);
	});
var _recursion$symulator_client_elm$Camera_Utils$isInXBound = F3(
	function (maxX, loc, cam) {
		return (_elm_lang$core$Native_Utils.cmp(loc.x, cam.x) > -1) && (_elm_lang$core$Native_Utils.cmp(loc.x, cam.x + maxX) < 0);
	});
var _recursion$symulator_client_elm$Camera_Utils$isOnZLevel = F2(
	function (loc, cam) {
		return _elm_lang$core$Native_Utils.eq(cam.z, loc.z);
	});
var _recursion$symulator_client_elm$Camera_Utils$maxY = function (model) {
	return ((model.height / model.tileSize) | 0) + 1;
};
var _recursion$symulator_client_elm$Camera_Utils$maxX = function (model) {
	return ((model.width / model.tileSize) | 0) + 1;
};
var _recursion$symulator_client_elm$Camera_Utils$inBounds = F2(
	function (coords, model) {
		return A2(_recursion$symulator_client_elm$Camera_Utils$isOnZLevel, coords, model.position) && (A3(
			_recursion$symulator_client_elm$Camera_Utils$isInXBound,
			_recursion$symulator_client_elm$Camera_Utils$maxX(model),
			coords,
			model.position) && A3(
			_recursion$symulator_client_elm$Camera_Utils$isInYBound,
			_recursion$symulator_client_elm$Camera_Utils$maxY(model),
			coords,
			model.position));
	});
var _recursion$symulator_client_elm$Camera_Utils$yEdge = function (model) {
	return model.position.y + _recursion$symulator_client_elm$Camera_Utils$maxY(model);
};
var _recursion$symulator_client_elm$Camera_Utils$xEdge = function (model) {
	return model.position.x + _recursion$symulator_client_elm$Camera_Utils$maxX(model);
};
var _recursion$symulator_client_elm$Camera_Utils$getEdges = function (model) {
	return {
		ctor: '_Tuple2',
		_0: _recursion$symulator_client_elm$Camera_Utils$xEdge(model),
		_1: _recursion$symulator_client_elm$Camera_Utils$yEdge(model)
	};
};
var _recursion$symulator_client_elm$Camera_Utils$getScreenLocations = function (model) {
	var coords = F2(
		function (x, y) {
			return {ctor: '_Tuple2', _0: x, _1: y};
		});
	var _p0 = _recursion$symulator_client_elm$Camera_Utils$getEdges(model);
	var xEdge = _p0._0;
	var yEdge = _p0._1;
	var generateCoords = function (x) {
		return A2(
			_elm_lang$core$List$map,
			coords(x),
			A2(_elm_lang$core$List$range, model.position.y, yEdge));
	};
	return A2(
		_elm_lang$core$List$concatMap,
		generateCoords,
		A2(_elm_lang$core$List$range, model.position.x, xEdge));
};
var _recursion$symulator_client_elm$Camera_Utils$translate = F2(
	function (coords, model) {
		var tileMultiplier = function (n) {
			return n * model.tileSize;
		};
		var translate_ = F2(
			function (a, b) {
				return tileMultiplier(a) - tileMultiplier(b);
			});
		return {
			ctor: '_Tuple2',
			_0: A2(translate_, coords.x, model.position.x),
			_1: A2(translate_, coords.y, model.position.y)
		};
	});
var _recursion$symulator_client_elm$Camera_Utils$resize = F2(
	function (size, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{width: size.width, height: size.height});
	});
var _recursion$symulator_client_elm$Camera_Utils$updateDimensions = F2(
	function (dim, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{worldDimensions: dim});
	});
