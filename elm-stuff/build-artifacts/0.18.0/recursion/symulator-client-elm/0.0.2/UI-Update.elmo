var _recursion$symulator_client_elm$UI_Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'KeyMsg':
				return A2(_recursion$symulator_client_elm$UI_Input$keypress, _p0._0, model);
			case 'MouseDown':
				return A2(
					_recursion$symulator_client_elm$Utils_ops['=>'],
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								selector: A2(_recursion$symulator_client_elm$UI_Selector_Update$update, _recursion$symulator_client_elm$UI_Selector_Model$Enable, model.selector)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_recursion$symulator_client_elm$App_Model$NoAction);
			case 'MouseUp':
				return A2(
					_recursion$symulator_client_elm$Utils_ops['=>'],
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								selector: A2(_recursion$symulator_client_elm$UI_Selector_Update$update, _recursion$symulator_client_elm$UI_Selector_Model$Disable, model.selector)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_recursion$symulator_client_elm$App_Model$NoAction);
			case 'MouseOver':
				var _p2 = _p0._0;
				var _p1 = A2(
					_recursion$symulator_client_elm$UI_Inspector_Update$update,
					A2(_recursion$symulator_client_elm$UI_Inspector_Model$SetInspected, _p2, _p0._1),
					model.inspector);
				var inspectorModel = _p1._0;
				var cmd = _p1._1;
				var selectorModel = A2(
					_recursion$symulator_client_elm$UI_Selector_Update$update,
					_recursion$symulator_client_elm$UI_Selector_Model$MouseOver(_p2),
					model.selector);
				return A2(
					_recursion$symulator_client_elm$Utils_ops['=>'],
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{selector: selectorModel, inspector: inspectorModel}),
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: A2(_elm_lang$core$Platform_Cmd$map, _recursion$symulator_client_elm$UI_Model$InspectorMsg, cmd),
								_1: {ctor: '[]'}
							})
					},
					_recursion$symulator_client_elm$App_Model$NoAction);
			case 'WindowResized':
				var _p3 = _p0._0;
				return A2(
					_recursion$symulator_client_elm$Utils_ops['=>'],
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								camera: A2(_recursion$symulator_client_elm$UI_Camera_Utils$resize, _p3, model.camera),
								window: _p3
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_recursion$symulator_client_elm$App_Model$NoAction);
			case 'SelectorMsg':
				var selectorModel = A2(_recursion$symulator_client_elm$UI_Selector_Update$update, _p0._0, model.selector);
				return A2(
					_recursion$symulator_client_elm$Utils_ops['=>'],
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{selector: selectorModel}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_recursion$symulator_client_elm$App_Model$NoAction);
			case 'InspectorMsg':
				var _p4 = A2(_recursion$symulator_client_elm$UI_Inspector_Update$update, _p0._0, model.inspector);
				var inspModel = _p4._0;
				var cmd = _p4._1;
				return A2(
					_recursion$symulator_client_elm$Utils_ops['=>'],
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{inspector: inspModel}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _recursion$symulator_client_elm$UI_Model$InspectorMsg, cmd)
					},
					_recursion$symulator_client_elm$App_Model$NoAction);
			default:
				var _p5 = A2(_recursion$symulator_client_elm$UI_Console_Update$update, _p0._0, model.console);
				var consoleModel = _p5._0._0;
				var consoleCmd = _p5._0._1;
				var action = _p5._1;
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{console: consoleModel}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _recursion$symulator_client_elm$UI_Model$ConsoleMsg, consoleCmd)
					},
					_1: action
				};
		}
	});
