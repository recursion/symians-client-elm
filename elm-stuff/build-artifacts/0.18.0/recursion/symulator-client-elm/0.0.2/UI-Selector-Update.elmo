var _recursion$symulator_client_elm$UI_Selector_Update$generateSelection = F2(
	function (coords, model) {
		var wrapCoords = F2(
			function (x, y) {
				return A3(_recursion$symulator_client_elm$World_Models$Coordinates, x, y, coords.z);
			});
		var subtractor = F2(
			function (a, b) {
				return (_elm_lang$core$Native_Utils.cmp(a, b) > 0) ? (a - b) : (b - a);
			});
		var start = function () {
			var _p0 = model.start;
			if (_p0.ctor === 'Nothing') {
				return coords;
			} else {
				return _p0._0;
			}
		}();
		var width = A2(subtractor, start.x, coords.x);
		var height = A2(subtractor, start.y, coords.y);
		var yRange = (_elm_lang$core$Native_Utils.cmp(start.y, coords.y) > 0) ? A2(_elm_lang$core$List$range, start.y - height, start.y) : A2(_elm_lang$core$List$range, start.y, start.y + height);
		var generateCoords = function (x) {
			return A2(
				_elm_lang$core$List$map,
				wrapCoords(x),
				yRange);
		};
		var xRange = (_elm_lang$core$Native_Utils.cmp(start.x, coords.x) > 0) ? A2(_elm_lang$core$List$range, start.x - width, start.x) : A2(_elm_lang$core$List$range, start.x, width + start.x);
		return A2(_elm_lang$core$List$concatMap, generateCoords, xRange);
	});
var _recursion$symulator_client_elm$UI_Selector_Update$removeSelection = F2(
	function (selection, selected) {
		return A2(
			_elm_lang$core$List$filter,
			function (loc) {
				return !A2(_elm_lang$core$List$member, loc, selection);
			},
			selected);
	});
var _recursion$symulator_client_elm$UI_Selector_Update$updateSelection = F2(
	function (coords, model) {
		var _p1 = model.mode;
		if (_p1.ctor === 'Designate') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					buffer: A2(_recursion$symulator_client_elm$UI_Selector_Update$generateSelection, coords, model)
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					buffer: A2(_recursion$symulator_client_elm$UI_Selector_Update$generateSelection, coords, model)
				});
		}
	});
var _recursion$symulator_client_elm$UI_Selector_Update$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'StartSelection':
				var _p3 = _p2._0;
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						start: _elm_lang$core$Maybe$Just(_p3),
						buffer: {
							ctor: '::',
							_0: _p3,
							_1: {ctor: '[]'}
						}
					});
			case 'MouseOver':
				return model.enabled ? A2(_recursion$symulator_client_elm$UI_Selector_Update$updateSelection, _p2._0, model) : model;
			case 'ChangeMode':
				return _elm_lang$core$Native_Utils.update(
					model,
					{mode: _p2._0, start: _elm_lang$core$Maybe$Nothing});
			case 'Enable':
				return _elm_lang$core$Native_Utils.update(
					model,
					{enabled: true});
			default:
				var _p4 = model.mode;
				if (_p4.ctor === 'Designate') {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							start: _elm_lang$core$Maybe$Nothing,
							enabled: false,
							selected: A2(_elm_lang$core$Basics_ops['++'], model.buffer, model.selected),
							buffer: {ctor: '[]'}
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							start: _elm_lang$core$Maybe$Nothing,
							enabled: false,
							selected: A2(_recursion$symulator_client_elm$UI_Selector_Update$removeSelection, model.buffer, model.selected),
							buffer: {ctor: '[]'}
						});
				}
		}
	});
