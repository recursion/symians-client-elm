var _recursion$symulator_client_elm$UI_Camera_Move$zLevelDown = function (model) {
	var pos = model.position;
	var nextZ = model.position.z - 1;
	var nextPos = _elm_lang$core$Native_Utils.update(
		pos,
		{z: nextZ});
	return (_elm_lang$core$Native_Utils.cmp(nextZ, 0) < 0) ? model : _elm_lang$core$Native_Utils.update(
		model,
		{position: nextPos});
};
var _recursion$symulator_client_elm$UI_Camera_Move$borderBounds = 5;
var _recursion$symulator_client_elm$UI_Camera_Move$down = function (model) {
	var pos = model.position;
	var screenHeightInTiles = (model.height / model.tileSize) | 0;
	var nextY = model.position.y + 1;
	var nextPos = _elm_lang$core$Native_Utils.update(
		pos,
		{y: nextY});
	return (_elm_lang$core$Native_Utils.cmp(nextY + screenHeightInTiles, model.worldDimensions.height + _recursion$symulator_client_elm$UI_Camera_Move$borderBounds) > 0) ? model : _elm_lang$core$Native_Utils.update(
		model,
		{position: nextPos});
};
var _recursion$symulator_client_elm$UI_Camera_Move$up = function (model) {
	if (_elm_lang$core$Native_Utils.cmp(model.position.y - 1, 0 - _recursion$symulator_client_elm$UI_Camera_Move$borderBounds) < 0) {
		return model;
	} else {
		var pos = model.position;
		var nextPos = _elm_lang$core$Native_Utils.update(
			pos,
			{y: model.position.y - 1});
		return _elm_lang$core$Native_Utils.update(
			model,
			{position: nextPos});
	}
};
var _recursion$symulator_client_elm$UI_Camera_Move$left = function (model) {
	if (_elm_lang$core$Native_Utils.cmp(model.position.x - 1, 0 - _recursion$symulator_client_elm$UI_Camera_Move$borderBounds) < 0) {
		return model;
	} else {
		var pos = model.position;
		var nextPos = _elm_lang$core$Native_Utils.update(
			pos,
			{x: model.position.x - 1});
		return _elm_lang$core$Native_Utils.update(
			model,
			{position: nextPos});
	}
};
var _recursion$symulator_client_elm$UI_Camera_Move$right = function (model) {
	var pos = model.position;
	var screenWidthInTiles = (model.width / model.tileSize) | 0;
	var nextX = model.position.x + 1;
	var nextPos = _elm_lang$core$Native_Utils.update(
		pos,
		{x: nextX});
	return (_elm_lang$core$Native_Utils.cmp(nextX + screenWidthInTiles, model.worldDimensions.width + _recursion$symulator_client_elm$UI_Camera_Move$borderBounds) > 0) ? model : _elm_lang$core$Native_Utils.update(
		model,
		{position: nextPos});
};
var _recursion$symulator_client_elm$UI_Camera_Move$currentZLimit = 2;
var _recursion$symulator_client_elm$UI_Camera_Move$zLevelUp = function (camera) {
	if (_elm_lang$core$Native_Utils.cmp(camera.position.z, _recursion$symulator_client_elm$UI_Camera_Move$currentZLimit) > -1) {
		return camera;
	} else {
		var pos = camera.position;
		var nextPos = _elm_lang$core$Native_Utils.update(
			pos,
			{z: camera.position.z + 1});
		return _elm_lang$core$Native_Utils.update(
			camera,
			{position: nextPos});
	}
};
