var _moarwick$elm_webpack_starter$UI_Camera$resize = F2(
	function (size, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{width: size.width, height: size.height});
	});
var _moarwick$elm_webpack_starter$UI_Camera$moveLeft = function (camera) {
	if (_elm_lang$core$Native_Utils.cmp(camera.position.x - 1, -1) < 0) {
		return camera;
	} else {
		var pos = camera.position;
		var nextPos = _elm_lang$core$Native_Utils.update(
			pos,
			{x: camera.position.x - 1});
		return _elm_lang$core$Native_Utils.update(
			camera,
			{position: nextPos});
	}
};
var _moarwick$elm_webpack_starter$UI_Camera$moveUp = function (camera) {
	if (_elm_lang$core$Native_Utils.cmp(camera.position.y - 1, -1) < 0) {
		return camera;
	} else {
		var pos = camera.position;
		var nextPos = _elm_lang$core$Native_Utils.update(
			pos,
			{y: camera.position.y - 1});
		return _elm_lang$core$Native_Utils.update(
			camera,
			{position: nextPos});
	}
};
var _moarwick$elm_webpack_starter$UI_Camera$moveZLevelDown = function (camera) {
	var pos = camera.position;
	var nextZ = camera.position.z - 1;
	var nextPos = _elm_lang$core$Native_Utils.update(
		pos,
		{z: nextZ});
	return (_elm_lang$core$Native_Utils.cmp(nextZ, 0) < 0) ? camera : _elm_lang$core$Native_Utils.update(
		camera,
		{position: nextPos});
};
var _moarwick$elm_webpack_starter$UI_Camera$isInYBound = F3(
	function (maxY, loc, cam) {
		return (_elm_lang$core$Native_Utils.cmp(loc.y, cam.y) > -1) && (_elm_lang$core$Native_Utils.cmp(loc.y, cam.y + maxY) < 0);
	});
var _moarwick$elm_webpack_starter$UI_Camera$isInXBound = F3(
	function (maxX, loc, cam) {
		return (_elm_lang$core$Native_Utils.cmp(loc.x, cam.x) > -1) && (_elm_lang$core$Native_Utils.cmp(loc.x, cam.x + maxX) < 0);
	});
var _moarwick$elm_webpack_starter$UI_Camera$isOnZLevel = F2(
	function (loc, cam) {
		return _elm_lang$core$Native_Utils.eq(cam.z, loc.z);
	});
var _moarwick$elm_webpack_starter$UI_Camera$updateDimensions = F2(
	function (dim, camera) {
		return _elm_lang$core$Native_Utils.update(
			camera,
			{worldDimensions: dim});
	});
var _moarwick$elm_webpack_starter$UI_Camera$currentZLimit = 2;
var _moarwick$elm_webpack_starter$UI_Camera$moveZLevelUp = function (camera) {
	if (_elm_lang$core$Native_Utils.cmp(camera.position.z, _moarwick$elm_webpack_starter$UI_Camera$currentZLimit) > -1) {
		return camera;
	} else {
		var pos = camera.position;
		var nextPos = _elm_lang$core$Native_Utils.update(
			pos,
			{z: camera.position.z + 1});
		return _elm_lang$core$Native_Utils.update(
			camera,
			{position: nextPos});
	}
};
var _moarwick$elm_webpack_starter$UI_Camera$tileSize = 16;
var _moarwick$elm_webpack_starter$UI_Camera$translate = F2(
	function (coords, camera) {
		var tileMultiplier = function (n) {
			return n * _moarwick$elm_webpack_starter$UI_Camera$tileSize;
		};
		var translate_ = F2(
			function (a, b) {
				return tileMultiplier(a) - tileMultiplier(b);
			});
		return {
			ctor: '_Tuple2',
			_0: A2(translate_, coords.x, camera.position.x),
			_1: A2(translate_, coords.y, camera.position.y)
		};
	});
var _moarwick$elm_webpack_starter$UI_Camera$maxX = function (camera) {
	return ((camera.width / _moarwick$elm_webpack_starter$UI_Camera$tileSize) | 0) + 1;
};
var _moarwick$elm_webpack_starter$UI_Camera$width = function (camera) {
	return camera.position.x + _moarwick$elm_webpack_starter$UI_Camera$maxX(camera);
};
var _moarwick$elm_webpack_starter$UI_Camera$maxY = function (camera) {
	return ((camera.height / _moarwick$elm_webpack_starter$UI_Camera$tileSize) | 0) + 1;
};
var _moarwick$elm_webpack_starter$UI_Camera$height = function (camera) {
	return camera.position.y + _moarwick$elm_webpack_starter$UI_Camera$maxY(camera);
};
var _moarwick$elm_webpack_starter$UI_Camera$size = function (camera) {
	return {
		ctor: '_Tuple2',
		_0: _moarwick$elm_webpack_starter$UI_Camera$width(camera),
		_1: _moarwick$elm_webpack_starter$UI_Camera$height(camera)
	};
};
var _moarwick$elm_webpack_starter$UI_Camera$getScreenLocations = function (camera) {
	var coords = F2(
		function (x, y) {
			return {ctor: '_Tuple2', _0: x, _1: y};
		});
	var _p0 = _moarwick$elm_webpack_starter$UI_Camera$size(camera);
	var width = _p0._0;
	var height = _p0._1;
	var xGen = function (x) {
		return A2(
			_elm_lang$core$List$map,
			coords(x),
			A2(_elm_lang$core$List$range, camera.position.y, height));
	};
	return A2(
		_elm_lang$core$List$concatMap,
		xGen,
		A2(_elm_lang$core$List$range, camera.position.x, width));
};
var _moarwick$elm_webpack_starter$UI_Camera$inBounds = F2(
	function (coords, camera) {
		return A2(_moarwick$elm_webpack_starter$UI_Camera$isOnZLevel, coords, camera.position) && (A3(
			_moarwick$elm_webpack_starter$UI_Camera$isInXBound,
			_moarwick$elm_webpack_starter$UI_Camera$maxX(camera),
			coords,
			camera.position) && A3(
			_moarwick$elm_webpack_starter$UI_Camera$isInYBound,
			_moarwick$elm_webpack_starter$UI_Camera$maxY(camera),
			coords,
			camera.position));
	});
var _moarwick$elm_webpack_starter$UI_Camera$moveDown = function (camera) {
	var pos = camera.position;
	var tilesPos = (camera.height / _moarwick$elm_webpack_starter$UI_Camera$tileSize) | 0;
	var nextY = camera.position.y + 1;
	var nextPos = _elm_lang$core$Native_Utils.update(
		pos,
		{y: nextY});
	return (_elm_lang$core$Native_Utils.cmp(nextY, (camera.worldDimensions.height - tilesPos) + 1) > 0) ? camera : _elm_lang$core$Native_Utils.update(
		camera,
		{position: nextPos});
};
var _moarwick$elm_webpack_starter$UI_Camera$moveRight = function (camera) {
	var pos = camera.position;
	var tilesPos = (camera.width / _moarwick$elm_webpack_starter$UI_Camera$tileSize) | 0;
	var nextX = camera.position.x + 1;
	var nextPos = _elm_lang$core$Native_Utils.update(
		pos,
		{x: nextX});
	return (_elm_lang$core$Native_Utils.cmp(nextX, (camera.worldDimensions.width - tilesPos) + 1) > 0) ? camera : _elm_lang$core$Native_Utils.update(
		camera,
		{position: nextPos});
};
