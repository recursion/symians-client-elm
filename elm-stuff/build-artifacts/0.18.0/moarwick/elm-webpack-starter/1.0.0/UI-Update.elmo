var _moarwick$elm_webpack_starter$UI_Update$camera = F2(
	function (camera, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{camera: camera});
	});
var _moarwick$elm_webpack_starter$UI_Update$addSelected = F2(
	function (coords, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				selected: {ctor: '::', _0: coords, _1: model.selected}
			});
	});
var _moarwick$elm_webpack_starter$UI_Update$removeSelected = F2(
	function (coords, model) {
		var notCoords = function (n) {
			return !_elm_lang$core$Native_Utils.eq(n, coords);
		};
		var nextSelected = A2(_elm_lang$core$List$filter, notCoords, model.selected);
		return _elm_lang$core$Native_Utils.update(
			model,
			{selected: nextSelected});
	});
var _moarwick$elm_webpack_starter$UI_Update$processConsoleInput = F2(
	function (chat, model) {
		var _p0 = A2(_elm_lang$core$String$left, 1, model.consoleInput);
		if (_p0 === '\\') {
			return A2(
				_elm_lang$core$Debug$log,
				A2(_elm_lang$core$Basics_ops['++'], 'Got console input: ', model.consoleInput),
				_moarwick$elm_webpack_starter$App_Model$NoAction);
		} else {
			return A3(
				_moarwick$elm_webpack_starter$App_Model$Send,
				_moarwick$elm_webpack_starter$Chat_Model$newChatMsgEvent,
				chat.name,
				_moarwick$elm_webpack_starter$Chat_Decoders$encodeChatMessage(model.consoleInput));
		}
	});
var _moarwick$elm_webpack_starter$UI_Update$update = F3(
	function (chat, msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'KeyMsg':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: A2(_moarwick$elm_webpack_starter$UI_Input$keypress, _p1._0, model),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
			case 'WindowResized':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								camera: A2(_moarwick$elm_webpack_starter$UI_Camera$resize, _p1._0, model.camera)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
			case 'SetInspected':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								inspector: A2(_moarwick$elm_webpack_starter$UI_Model$Inspection, _p1._0, _p1._1)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
			case 'ToggleInspector':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{viewInspector: !model.viewInspector}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
			case 'ToggleConsole':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{viewConsole: !model.viewConsole}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
			case 'ToggleSelected':
				var _p2 = _p1._0;
				return A2(_elm_lang$core$List$member, _p2, model.selected) ? {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: A2(_moarwick$elm_webpack_starter$UI_Update$removeSelected, _p2, model),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				} : {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: A2(_moarwick$elm_webpack_starter$UI_Update$addSelected, _p2, model),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
			case 'SubmitConsoleInput':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{consoleInput: ''}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: A2(_moarwick$elm_webpack_starter$UI_Update$processConsoleInput, chat, model)
				};
			case 'SetConsoleInput':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{consoleInput: _p1._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{consoleHasFocus: !model.consoleHasFocus}),
						_1: _elm_lang$core$Platform_Cmd$none
					},
					_1: _moarwick$elm_webpack_starter$App_Model$NoAction
				};
		}
	});
